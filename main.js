// ‚öôÔ∏è C·∫•u h√¨nh GitHub
const GITHUB_USERNAME = "DoMung2266";
const GITHUB_REPO = "NhapKho";
const GITHUB_FILEPATH = "products.json";

// üì¶ API URL
const apiUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${GITHUB_FILEPATH}`;

// üîç Ki·ªÉm tra tr·∫°ng th√°i repo
async function checkRepoStatus(token) {
  try {
    const res = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`, {
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github+json"
      }
    });

    return res.ok;
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra repo:", err);
    return false;
  }
}

// üì§ X·ª≠ l√Ω g·ª≠i form s·∫£n ph·∫©m
document.getElementById("productForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const statusDiv = document.getElementById("status");
  const token = document.getElementById("tokenInput").value.trim();

  if (!token) {
    statusDiv.textContent = "‚ùå B·∫°n ch∆∞a nh·∫≠p GitHub Token!";
    return;
  }

  statusDiv.textContent = "üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i repo...";

  const validRepo = await checkRepoStatus(token);
  if (!validRepo) {
    statusDiv.textContent = "‚ùå Kh√¥ng th·ªÉ truy c·∫≠p repo ho·∫∑c token sai.";
    return;
  }

  // üìù L·∫•y d·ªØ li·ªáu t·ª´ form
  const name = document.getElementById("name").value.trim();
  const description = document.getElementById("description").value.trim();
  const price = parseInt(document.getElementById("price").value, 10);
  const quantity = parseInt(document.getElementById("quantity").value, 10);
  const image = document.getElementById("image").value.trim();

  const newItem = {
    name,
    description,
    price,
    quantity,
    image,
    timestamp: new Date().toISOString()
  };

  statusDiv.textContent = "‚è≥ ƒêang l∆∞u s·∫£n ph·∫©m l√™n GitHub...";

  try {
    // üì• L·∫•y file hi·ªán t·∫°i
    const res = await fetch(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github+json"
      }
    });

    let currentContent = [];
    let fileSha = null;

    if (res.ok) {
      const fileData = await res.json();
      if (fileData.content) {
        const decoded = atob(fileData.content);
        currentContent = JSON.parse(decoded);
        fileSha = fileData.sha;
      }
    }

    // ‚ûï Th√™m s·∫£n ph·∫©m m·ªõi
    currentContent.push(newItem);

    // üîÑ M√£ h√≥a n·ªôi dung JSON c√≥ d·∫•u
    const encoder = new TextEncoder();
    const encoded = encoder.encode(JSON.stringify(currentContent, null, 2));
    const updatedContent = btoa(String.fromCharCode(...encoded));

    const payload = {
      message: `Th√™m s·∫£n ph·∫©m: ${name}`,
      content: updatedContent
    };

    if (fileSha) {
      payload.sha = fileSha;
    }

    // ‚úèÔ∏è Ghi n·ªôi dung l√™n GitHub
    const updateRes = await fetch(apiUrl, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github+json"
      },
      body: JSON.stringify(payload)
    });

    if (updateRes.ok) {
      statusDiv.textContent = "‚úÖ S·∫£n ph·∫©m ƒë√£ l∆∞u th√†nh c√¥ng!";
      document.getElementById("productForm").reset();
    } else {
      const err = await updateRes.json();
      statusDiv.textContent = `‚ùå L·ªói ghi file: ${err.message || "Kh√¥ng r√µ l·ªói"}`;
      console.error("‚ùå GitHub error:", err);
    }
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi:", error);
    statusDiv.textContent = "‚ùå C√≥ l·ªói khi k·∫øt n·ªëi GitHub.";
  }
});
