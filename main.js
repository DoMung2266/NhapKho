// ‚öôÔ∏è C·∫•u h√¨nh GitHub API
const GITHUB_USERNAME = "DoMung2266";
const GITHUB_REPO = "NhapKho";
const GITHUB_FILEPATH = "products.json";
const GITHUB_TOKEN = "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"; // G·∫Øn token h·ª£p l·ªá c·ªßa b·∫°n

const apiUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${GITHUB_FILEPATH}`;

// üîç Ki·ªÉm tra tr·∫°ng th√°i repo
async function checkRepoStatus() {
  const statusDiv = document.getElementById("status");
  statusDiv.textContent = "üîé ƒêang ki·ªÉm tra tr·∫°ng th√°i repo...";

  try {
    const res = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`, {
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github+json"
      }
    });

    const data = await res.json();
    if (res.ok) {
      console.log("‚úÖ Repo h·ª£p l·ªá:", data.full_name);
      return true;
    } else {
      statusDiv.textContent = `‚ùå Kh√¥ng th·ªÉ truy c·∫≠p repo: ${data.message}`;
      return false;
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra repo:", error);
    statusDiv.textContent = "‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i repo.";
    return false;
  }
}

// üì§ X·ª≠ l√Ω form g·ª≠i s·∫£n ph·∫©m
document.getElementById("productForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const statusDiv = document.getElementById("status");

  // Ki·ªÉm tra k·∫øt n·ªëi repo
  const validRepo = await checkRepoStatus();
  if (!validRepo) return;

  // üìù L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ form
  const name = document.getElementById("name").value.trim();
  const description = document.getElementById("description").value.trim();
  const price = parseInt(document.getElementById("price").value, 10);
  const quantity = parseInt(document.getElementById("quantity").value, 10);
  const image = document.getElementById("image").value.trim();

  const newItem = {
    name,
    description,
    price,
    quantity,
    image,
    timestamp: new Date().toISOString()
  };

  statusDiv.textContent = "‚è≥ ƒêang l∆∞u s·∫£n ph·∫©m l√™n GitHub...";

  try {
    // üì• L·∫•y file JSON hi·ªán t·∫°i n·∫øu c√≥
    const res = await fetch(apiUrl, {
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github+json"
      }
    });

    let currentContent = [];
    let fileSha = null;

    if (res.ok) {
      const fileData = await res.json();

      if (fileData.content) {
        const decoded = atob(fileData.content);
        currentContent = JSON.parse(decoded);
        fileSha = fileData.sha;
      }
    }

    // ‚ûï Th√™m s·∫£n ph·∫©m m·ªõi
    currentContent.push(newItem);

    // üîÑ M√£ h√≥a UTF-8 n·ªôi dung JSON h·ªó tr·ª£ ti·∫øng Vi·ªát
    const encoder = new TextEncoder();
    const encoded = encoder.encode(JSON.stringify(currentContent, null, 2));
    const updatedContent = btoa(String.fromCharCode(...encoded));

    const payload = {
      message: `Th√™m s·∫£n ph·∫©m: ${name}`,
      content: updatedContent
    };

    if (fileSha) {
      payload.sha = fileSha;
    }

    // ‚úèÔ∏è Ghi n·ªôi dung l√™n GitHub
    const updateRes = await fetch(apiUrl, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github+json"
      },
      body: JSON.stringify(payload)
    });

    if (updateRes.ok) {
      statusDiv.textContent = "‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng l√™n GitHub!";
      document.getElementById("productForm").reset();
    } else {
      const err = await updateRes.json();
      console.error("‚ùå GitHub error:", err);
      statusDiv.textContent = `‚ùå L·ªói ghi file: ${err.message || "Kh√¥ng r√µ l·ªói"}`;
    }

  } catch (error) {
    console.error("‚ùå L·ªói ghi GitHub:", error);
    statusDiv.textContent = "‚ùå C√≥ l·ªói khi k·∫øt n·ªëi t·ªõi GitHub.";
  }
});
